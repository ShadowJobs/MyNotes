# server {
#     listen 80;
#     server_name your-domain.com;
#     # 重定向所有 HTTP 到 HTTPS. 
#     location / {
#         return 301 https://$host$request_uri;
#     }

  # location /auth/ {  #转发auth
  #   proxy_pass http://xxx-dev.lycompany.works/auth/;
  # }
  # location /epl/ {
  #   proxy_pass http://xxx-dev.lycompany.works/epl/;
  # }
# }

server {
  listen 8008;
  # keepalive_timeout  120;#nginx配置keep-alive的方式

  location / {
    root   /Users/linying/ly/mygit/MyNotes/react/antdp1/dist;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
    expires -1; # Set it to different value depending on your standard requirements
    add_header Content-Security-Policy "frame-ancestors 'self' http://localhost:8009/ http://localhost:8008/"; #加iframe限制，只允许example.com访问,也就是说，默认是可以iframe的
  }
  # location /ly/ { #前端转发参考将共用域名的条件下，将/ly/项目转发到这个目录
  #               alias /root/ly/running/antdp1/;  # react应用生成的build目录
  #               try_files $uri $uri/ /index.html;
  #               proxy_set_header Host $host;
  #               proxy_set_header X-Real-IP $remote_addr;
  #               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  #               add_header Content-Security-Policy "frame-ancestors 'self'  http://localhost:8009/ http://localhost:8008/  http://example.com"; #加限制
  #       }
	location /api-ly/ { #本站跨域
  # 注意必须以/结尾，否则api-ly会被附加到后面，变成http://127.0.0.1:5000/api-ly/
  # 另外不要随便修改或加其他的header，例如proxy_set_header X-Real-IP，X-Forwarded-For，add_header Access-Control-Allow-Origin *等，有的服务器会检查导致失败
    proxy_pass http://127.0.0.1:5000/;
  }
  location /browser-cache/ { #浏览器缓存服务
    proxy_pass http://127.0.0.1:5002/;
  }
  location /api-python/ { #python服务
    proxy_pass http://127.0.0.1:5003/;
  }

# 通过nginx代理解决跨域问题
  location /api-outer-proxy { 
    # 这句不会进入express，而是直接转发，解决外站的跨域
      proxy_intercept_errors on; # 开启记录代理的请求错误日志
      error_log /Users/linying/ly/running/nginx/error_proxy.log warn;
      access_log /Users/linying/ly/running/nginx/access_proxy.log;

# 这3行配置代理转发时加上原始的请求头，否则后端服务器可能会拒绝请求
      proxy_pass https://www.xyccstudio.cn/ly; # 这里是真实的后端服务器地址
      proxy_set_header X-Real-IP $remote_addr; #这些行设置了一些HTTP头信息，这些信息会被发送给上游服务器
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #本行加上原始请求的ip信息，并且第二个参数用来控制多层代理时，加上逐层的ip，在查看X-Forwarded-For头部信息时，通常情况下，最左边的IP地址是最初的客户端IP，而随后的IP地址则表示经过的每一级代理。例如，X-Forwarded-For: client, proxy1, proxy2中，client就是原始客户端IP，proxy1和proxy2分别是第一和第二级代理的IP

      proxy_set_header Host $host:$server_port;
      add_header Access-Control-Allow-Origin *; #添加这一行，允许所有来源
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; # 允许的方法
      # 如果后端服务器检查origin和methods，则需要注释上面两行，并取消下面两行的注释
      # proxy_set_header Access-Control-Allow-Origin *;
      # proxy_set_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
  }
  # 百度翻译代理
  location /baidutrans-only-proxy/ {
      proxy_pass http://api.fanyi.baidu.com/;
      # 百度的转发会检查这些头，有些是浏览器自动添加的，所以可能百度检查到了浏览器就报错了cors
      # proxy_set_header Host $host; 
      # proxy_set_header X-Real-IP $remote_addr; #这些行设置了一些HTTP头信息，这些信息会被发送给上游服务器
      # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

# 这个代理似乎没生效，不过也不常用，可以不用调试了
  location ~ ^/baidutrans-proxy/(.*)$ {
    set $target_url https://$1;
    # $1 是一个捕获组，它代表了匹配的正则表达式 (.*) 的内容。换句话说，$1 会捕获URL路径中 /api-outer-proxy/ 后面的所有内容。
    # 这种方法有安全风险，因为它允许用户决定要代理到的网站
    proxy_pass $target_url;
  }
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }

# EventSource请求代理专属配置。对于eventSource请求，需要注意：
# 1，增加缓冲区大小Nginx 默认的缓冲区可能对于大量的数据流来说太小了。你可以通过增加 proxy_buffers 和 proxy_buffer_size 的值来增加缓冲区大小。
# http {
#     ...
#     proxy_buffers 8 16k;
#     proxy_buffer_size 32k;
# }
# 2，禁用缓存：对于 EventSource 这种实时的数据流，我们不希望有任何形式的缓存。proxy_set_header Cache-Control no-cache;
  location /stream {
    proxy_pass http://localhost:5000/stream;
    proxy_http_version 1.1;
    proxy_set_header Connection "";#确保使用 HTTP/1.1，并且及时发送请求头部。
# EventSource 是 HTTP 长轮询的一种实现，它创建一个持久的 HTTP 连接，使得服务器可以在有新事件时立即将数据推送到客户端。
# 对于常规的 HTTP 请求，当请求完成后，连接就会被关闭。但是对于 EventSource，连接会保持开启状态，以便服务器能够在任何时间发送新的事件。
# 因此，当我们使用 Nginx 代理 EventSource 连接时，需要通过 proxy_set_header Connection ""; 清除 "Connection" 头部字段，这样才能让 Nginx 能够正确地处理长轮询连接。
# 如果设置 "Connection" 头为 "upgrade"，Nginx 将会错误地尝试升级 HTTP 连接（就像 WebSocket 那样），而不是保持连接开启。这样会导致 EventSource 无法正确工作。
# 如果不设置""，则为默认的close，这样发送数据后可能就断开了，导致后续的数据无法发送
# 总的来说，proxy_set_header Connection ""; 的目的是告诉 Nginx 忽略连接的升级，而是保持长轮询连接的正常工作。
    proxy_buffering off;#关闭请求的缓冲：默认情况下，Nginx 会缓冲 http 请求的响应。对于 EventSource 这种实时的数据流，我们不希望有任何形式的缓存。
    proxy_cache off;
    proxy_read_timeout 1h;#设置超时时间：Nginx 默认的代理超时可能对于 SSE 来说太短了
  }
  # websocket的转发
  location /ws {
    proxy_pass http://localhost:5001;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;#告诉服务器，客户端希望将连接升级到其他协议，这里是 WebSocket。$http_upgrade 变量的值取自客户端的原始请求头部，通常其值会是 "websocket"
    proxy_set_header Connection "upgrade";#表示客户端希望更改使用的子协议。在 WebSocket 的握手过程中，我们需要告诉服务器，我们希望 "Upgrade" 到 WebSocket 协议。
    proxy_read_timeout 86400;  # this setting is necessary for WebSocket connections to be long-lived
  }
}


server {
	listen       39000 ssl http2;
        listen       [::]:39000 ssl http2;
        ssl_certificate "/etc/pki/nginx/c.cn_bundle.crt";
        ssl_certificate_key "/etc/pki/nginx/c.cn.key";
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_prefer_server_ciphers on;

        location / {
                proxy_pass http://localhost:39001; # 将请求转发到本地的 39000 端口
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host $host;
        }
}



# 允许其他项目iframe内嵌本前端页面 除了上面介绍的Content-Security-Policy策略，老的方式如下，不推荐使用
# server {
#     listen 80;
#     server_name localhost;
#     location / {
#         add_header X-Frame-Options "SAMEORIGIN"; # 只允许同源网站进行嵌套
#         # 如果你想允许所有网站进行嵌套，可以使用下面的设置
#         # add_header X-Frame-Options "ALLOW-FROM http://example.com/"; # 允许指定的来源进行嵌套
#         # 或者直接注释掉或删除此 header 行，这将允许所有来源 iframe 嵌套。
#     }
# }